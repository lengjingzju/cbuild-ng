#/bin/bash
############################################
# SPDX-License-Identifier: MIT             #
# Copyright (C) 2021-.... Jing Leng        #
# Contact: Jing Leng <lengjingzju@163.com> #
############################################

script_path=$(realpath `dirname ${BASH_SOURCE[0]}`)
cbuild_path=${script_path}
machinetool=${cbuild_path}/bin/process_machine.sh
source ${cbuild_path}/clean.env

ENV_TOP_DIR=$(realpath ${script_path}/..)
ENV_TOP_OUT=$(realpath ${ENV_TOP_DIR}/output)

ENV_BUILD_MODE=classic  # classic yocto
ENV_BUILD_JOBS=-j$($machinetool build_jobs)
ENV_BUILD_SOC=$1
ENV_BUILD_ARCH=
ENV_BUILD_TOOL=$2

KERNEL_VER=
KERNEL_SRC=
KERNEL_OUT=

if [ ! -z "${ENV_BUILD_SOC}" ]; then
    export ENV_BUILD_SOC ENV_TOP_OUT
    ENV_BUILD_ARCH=$($machinetool linux_arch)
    KERNEL_VER=$($machinetool linux_version)
    KERNEL_SRC=${ENV_TOP_OUT}/kernel/linux-${KERNEL_VER}
    if [ -z "${ENV_BUILD_TOOL}" ]; then
        ENV_BUILD_TOOL=$($machinetool toolchain_path)/$($machinetool toolchain_dir)/bin/$($machinetool cross_compile)
    fi
fi

ENV_MAKE_DIR=${cbuild_path}/core
ENV_TOOL_DIR=${cbuild_path}/bin
ENV_DOWN_DIR=${ENV_TOP_OUT}/mirror-cache/downloads
ENV_CACHE_DIR=${ENV_TOP_OUT}/mirror-cache/build-cache

# Start http server: python -m http.server 8888
if [ $(cat /proc/1/cgroup |grep -c '/docker/') -eq 0 ]; then
    ENV_MIRROR_URL=http://127.0.0.1:8888
else
    ENV_MIRROR_URL=http://host.docker.internal:8888
fi

ENV_CROSS_ROOT=${ENV_TOP_OUT}/$(uname -m)-host
if [ ! -z "${ENV_BUILD_SOC}" ]; then
    ENV_CROSS_ROOT=${ENV_TOP_OUT}/${ENV_BUILD_SOC}
fi
ENV_CFG_ROOT=${ENV_CROSS_ROOT}/config
if [ ! -z "${KERNEL_SRC}" ]; then
    KERNEL_OUT=${ENV_CROSS_ROOT}/linux-${KERNEL_VER}
fi
ENV_NATIVE_ROOT=${ENV_TOP_OUT}/$(uname -m)-native

echo "============================================================"
echo "ENV_BUILD_MODE   : ${ENV_BUILD_MODE}"
echo "ENV_BUILD_JOBS   : ${ENV_BUILD_JOBS}"

if [ ! -z "${ENV_BUILD_SOC}" ]; then
    echo "ENV_BUILD_SOC    : ${ENV_BUILD_SOC}"
    echo "ENV_BUILD_ARCH   : ${ENV_BUILD_ARCH}"
    echo "ENV_BUILD_TOOL   : ${ENV_BUILD_TOOL}"
fi

echo "ENV_TOP_DIR      : ${ENV_TOP_DIR}"
echo "ENV_MAKE_DIR     : ${ENV_MAKE_DIR}"
echo "ENV_TOOL_DIR     : ${ENV_TOOL_DIR}"
echo "ENV_DOWN_DIR     : ${ENV_DOWN_DIR}"
echo "ENV_CACHE_DIR    : ${ENV_CACHE_DIR}"
echo "ENV_MIRROR_URL   : ${ENV_MIRROR_URL}"

echo "ENV_TOP_OUT      : ${ENV_TOP_OUT}"
echo "ENV_CROSS_ROOT   : ${ENV_CROSS_ROOT}"
echo "ENV_CFG_ROOT     : ${ENV_CFG_ROOT}"
echo "ENV_NATIVE_ROOT  : ${ENV_NATIVE_ROOT}"

if [ ! -z "${ENV_BUILD_SOC}" ]; then
    echo "KERNEL_VER       : ${KERNEL_VER}"
    echo "KERNEL_SRC       : ${KERNEL_SRC}"
    echo "KERNEL_OUT       : ${KERNEL_OUT}"
fi
echo "============================================================"

export ENV_BUILD_MODE ENV_BUILD_JOBS
if [ ! -z "${ENV_BUILD_SOC}" ]; then
    export ENV_BUILD_SOC ENV_BUILD_ARCH ENV_BUILD_TOOL
    export KERNEL_VER KERNEL_SRC KERNEL_OUT
else
    unset ENV_BUILD_SOC ENV_BUILD_ARCH ENV_BUILD_TOOL
    unset KERNEL_VER KERNEL_SRC KERNEL_OUT
fi
export ENV_TOP_DIR ENV_MAKE_DIR ENV_TOOL_DIR ENV_DOWN_DIR ENV_CACHE_DIR ENV_MIRROR_URL
export ENV_TOP_OUT ENV_CFG_ROOT ENV_CROSS_ROOT ENV_NATIVE_ROOT
