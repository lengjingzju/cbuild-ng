#/bin/bash
############################################
# SPDX-License-Identifier: MIT             #
# Copyright (C) 2021-.... Jing Leng        #
# Contact: Jing Leng <lengjingzju@163.com> #
############################################

script_path=$(realpath `dirname ${BASH_SOURCE[0]}`)
cbuild_path=${script_path}
machinetool=${cbuild_path}/bin/process_machine.sh
source ${cbuild_path}/clean.env

ENV_TOP_DIR=$(realpath ${script_path}/..)
ENV_TOP_OUT=$(realpath ${ENV_TOP_DIR}/output)

ENV_BUILD_MODE=classic  # classic yocto
ENV_BUILD_JOBS=-j$($machinetool build_jobs)
ENV_BUILD_SOC=
ENV_BUILD_TOOL=
ENV_SIMD_TYPE=  # neon / sse4 / avx2 / avx512

KERNEL_ARCH=
KERNEL_VER=
KERNEL_SRC=
KERNEL_OUT=

# choose the soc
choose_soc() {
    i=1
    num_each_line=1
    if [ $# -gt 40 ]; then
        num_each_line=4
    elif [ $# -gt 20 ]; then
        num_each_line=2
    else
        num_each_line=1
    fi

    for var in $@; do
        printf "%2d: %-26s" $i $var
        if [ $(( $i % num_each_line )) -eq 0 ]; then
            echo
        fi
        let i++
    done
    echo

    echo -n "Please input the chip number(1~$#): "
    read num

    if [ -z "$num" ] || [ $num -gt $# ] || [ $num -lt 1 ]; then
        echo -e "\033[31mERROR: Invalid number!\033[0m"
        return 1
    fi
    choice=$(eval echo \${$num})
}

host_flag=0
app_flag=0
while :; do
if [ "$1" = "host" ]; then
    host_flag=1
    shift 1
elif [ "$1" = "app" ]; then
    app_flag=1
    shift 1
else
    break
fi
done

choice=$1
choices=$(ls -F ${ENV_TOP_DIR}/board | grep '/$' | grep -wv 'generic' | sed 's:/$::g')
if [ $host_flag -eq 1 ]; then
    choices="generic $choices"
fi

if [ -z "$choice" ]; then
    choose_soc $choices || return 1
fi
if [ $(echo $choices | grep -wc $choice) -eq 0 ]; then
    echo -e "\033[31mERROR: Invalid choice($choice)!\033[0m"
    return 1
fi

if [ "$choice" != "generic" ]; then
    ENV_BUILD_SOC=$choice

    export ENV_BUILD_SOC
    ENV_SIMD_TYPE=$($machinetool simd)
else
    ENV_SIMD_TYPE=${HOST_SIMD_TYPE}
fi

if [ $host_flag -eq 0 ]; then
    export ENV_BUILD_SOC ENV_TOP_OUT
    ENV_BUILD_TOOL=$($machinetool toolchain)
    if [ $app_flag -eq 0 ]; then
        KERNEL_ARCH=$($machinetool linux_arch)
        KERNEL_VER=$($machinetool linux_version)
        KERNEL_SRC=$($machinetool linux_src)
        KERNEL_OUT=$($machinetool linux_out)
    fi
fi

ENV_MAKE_DIR=${cbuild_path}/core
ENV_TOOL_DIR=${cbuild_path}/bin
ENV_DOWN_DIR=${ENV_TOP_OUT}/mirror-cache/downloads
ENV_CACHE_DIR=${ENV_TOP_OUT}/mirror-cache/build-cache

# Start http server: python -m http.server 8888
if [ $(cat /proc/1/cgroup |grep -c '/docker/') -eq 0 ]; then
    ENV_MIRROR_URL=http://127.0.0.1:8888
else
    ENV_MIRROR_URL=http://host.docker.internal:8888
fi

if [ "$choice" != "generic" ]; then
    ENV_CROSS_ROOT=${ENV_TOP_OUT}/${ENV_BUILD_SOC}
else
    ENV_CROSS_ROOT=${ENV_TOP_OUT}/$(uname -m)-host
fi
ENV_CFG_ROOT=${ENV_CROSS_ROOT}/config
ENV_NATIVE_ROOT=${ENV_TOP_OUT}/$(uname -m)-native

echo "============================================================"
echo "ENV_BUILD_MODE   : ${ENV_BUILD_MODE}"
echo "ENV_BUILD_JOBS   : ${ENV_BUILD_JOBS}"
if [ "$choice" != "generic" ]; then
    echo "ENV_BUILD_SOC    : ${ENV_BUILD_SOC}"
fi
echo "ENV_SIMD_TYPE    : ${ENV_SIMD_TYPE}"
if [ $host_flag -eq 0 ]; then
    echo "ENV_BUILD_TOOL   : ${ENV_BUILD_TOOL}"
fi

echo "ENV_TOP_DIR      : ${ENV_TOP_DIR}"
echo "ENV_MAKE_DIR     : ${ENV_MAKE_DIR}"
echo "ENV_TOOL_DIR     : ${ENV_TOOL_DIR}"
echo "ENV_DOWN_DIR     : ${ENV_DOWN_DIR}"
echo "ENV_CACHE_DIR    : ${ENV_CACHE_DIR}"
echo "ENV_MIRROR_URL   : ${ENV_MIRROR_URL}"

echo "ENV_TOP_OUT      : ${ENV_TOP_OUT}"
echo "ENV_CROSS_ROOT   : ${ENV_CROSS_ROOT}"
echo "ENV_CFG_ROOT     : ${ENV_CFG_ROOT}"
echo "ENV_NATIVE_ROOT  : ${ENV_NATIVE_ROOT}"

if [ $host_flag -eq 0 ] && [ $app_flag -eq 0 ]; then
    echo "KERNEL_ARCH      : ${KERNEL_ARCH}"
    echo "KERNEL_VER       : ${KERNEL_VER}"
    echo "KERNEL_SRC       : ${KERNEL_SRC}"
    echo "KERNEL_OUT       : ${KERNEL_OUT}"
fi
echo "============================================================"

export ENV_BUILD_MODE ENV_BUILD_JOBS ENV_SIMD_TYPE
if [ "$choice" != "generic" ]; then
    export ENV_BUILD_SOC
else
    unset  ENV_BUILD_SOC
fi
if [ $host_flag -eq 0 ]; then
    export ENV_BUILD_TOOL
else
    unset  ENV_BUILD_TOOL
fi
if [ $host_flag -eq 0 ] && [ $app_flag -eq 0 ]; then
    export KERNEL_ARCH KERNEL_VER KERNEL_SRC KERNEL_OUT
else
    unset  KERNEL_ARCH KERNEL_VER KERNEL_SRC KERNEL_OUT
fi
export ENV_TOP_DIR ENV_MAKE_DIR ENV_TOOL_DIR ENV_DOWN_DIR ENV_CACHE_DIR ENV_MIRROR_URL
export ENV_TOP_OUT ENV_CFG_ROOT ENV_CROSS_ROOT ENV_NATIVE_ROOT
