#/bin/bash
############################################
# SPDX-License-Identifier: MIT             #
# Copyright (C) 2021-.... Jing Leng        #
# Contact: Jing Leng <lengjingzju@163.com> #
############################################

script_path=$(realpath `dirname ${BASH_SOURCE[0]}`)
cbuild_path=${script_path}
source ${cbuild_path}/clean.env

ENV_TOP_DIR=$(realpath ${script_path}/..)
ENV_TOP_OUT=$(realpath ${ENV_TOP_DIR}/build)

ENV_BUILD_MODE=yocto  # classic yocto
ENV_BUILD_SOC=$1
ENV_MAKE_DIR=${cbuild_path}/core
ENV_TOOL_DIR=${cbuild_path}/bin
ENV_DOWN_DIR=${ENV_TOP_OUT}/mirror-cache/downloads
ENV_CACHE_DIR=${ENV_TOP_OUT}/mirror-cache/sstate-cache
# Start http server: python -m http.server 8888
ENV_MIRROR_URL=http://127.0.0.1:8888

machine=
if [ ! -z "${ENV_BUILD_SOC}" ]; then
    export ENV_BUILD_SOC
    machine=$(${ENV_TOOL_DIR}/process_machine.sh machine)
fi
if [ -z "${machine}" ]; then
    machine="qemux86-64"
fi
ENV_CFG_ROOT=${ENV_TOP_OUT}/${machine}/config

echo "============================================================"
echo "ENV_BUILD_MODE   : ${ENV_BUILD_MODE}"
if [ ! -z "${ENV_BUILD_SOC}" ]; then
    echo "ENV_BUILD_SOC    : ${ENV_BUILD_SOC}"
fi
echo "ENV_TOP_DIR      : ${ENV_TOP_DIR}"
echo "ENV_MAKE_DIR     : ${ENV_MAKE_DIR}"
echo "ENV_TOOL_DIR     : ${ENV_TOOL_DIR}"
echo "ENV_DOWN_DIR     : ${ENV_DOWN_DIR}"
echo "ENV_CACHE_DIR    : ${ENV_CACHE_DIR}"
echo "ENV_MIRROR_URL   : ${ENV_MIRROR_URL}"

echo "ENV_TOP_OUT      : ${ENV_TOP_OUT}"
echo "ENV_CFG_ROOT     : ${ENV_CFG_ROOT}"
echo "============================================================"

export ENV_BUILD_MODE
if [ ! -z "${ENV_BUILD_SOC}" ]; then
    export ENV_BUILD_SOC
else
    unset ENV_BUILD_SOC
fi
export ENV_TOP_DIR ENV_MAKE_DIR ENV_TOOL_DIR ENV_DOWN_DIR ENV_CACHE_DIR ENV_MIRROR_URL
export ENV_TOP_OUT ENV_CFG_ROOT

########## Set Yocto Project ##########

POKY_URL=git://git.yoctoproject.org/poky
POKY_BRANCH=kirkstone
POKY_REV=5d822b31316663c838c5864ab68b28fb3ca41351
POKY_PATH=${ENV_TOP_OUT}/poky

if [ ! -e "${POKY_PATH}" ]; then
    ${ENV_TOOL_DIR}/fetch_package.sh git "${POKY_URL};branch=${POKY_BRANCH};rev=${POKY_REV}" poky ${ENV_TOP_OUT} poky
    if [ $? -ne 0 ]; then
        echo "ERROR: download failed: url=${POKY_URL} branch=${POKY_BRANCH} rev=${POKY_REV}"
        return 1
    fi
fi

POKY_SCRIPT=${POKY_PATH}/oe-init-build-env
POKY_OUTPUT=${ENV_TOP_OUT}/${machine}
LOCAL_CONF=${POKY_OUTPUT}/conf/local.conf
BBLAYERS_CONF=${POKY_OUTPUT}/conf/bblayers.conf

if [ ! -e ${LOCAL_CONF} ]; then

    source ${POKY_SCRIPT} ${POKY_OUTPUT} || return 1
    cat << EOF >> $LOCAL_CONF

# Setting the machine in the "meta-xxx/conf/machine/"
MACHINE = "${machine}"

# Setting the save path of downloads and sstate-cache
DL_DIR = "${ENV_DOWN_DIR}"
SSTATE_DIR = "${ENV_CACHE_DIR}"

# Setting the mirror of downloads and sstate-cache
#BB_HASHSERVE = "${ENV_MIRROR_URL}"
SSTATE_MIRRORS = "file://.* ${ENV_MIRROR_URL}/sstate-cache/PATH;downloadfilename=PATH"
SOURCE_MIRROR_URL = "${ENV_MIRROR_URL}/downloads"
INHERIT += "own-mirrors"

# Do not create symlinks oe-workdir/oe-logs in the src dir
EXTERNALSRC_SYMLINKS = ""

# Setting the customized envionment variables of CBuild
ENV_TOP_DIR = "${ENV_TOP_DIR}"
ENV_CFG_ROOT = "${ENV_CFG_ROOT}"
ENV_BUILD_MODE = "${ENV_BUILD_MODE}"
EOF

    bitbake-layers add-layer ${ENV_TOP_DIR}/scripts/meta-cbuild
    echo "include \$(ENV_TOP_DIR)/Makefile" >> ${POKY_OUTPUT}/Makefile

else
    source ${POKY_SCRIPT} ${POKY_OUTPUT} || return 1
fi
