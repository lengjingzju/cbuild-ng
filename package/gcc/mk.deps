############################################
# SPDX-License-Identifier: MIT             #
# Copyright (C) 2021-.... Jing Leng        #
# Contact: Jing Leng <lengjingzju@163.com> #
############################################

#DEPS(mk.deps) gcc(psysroot): unselect gmp mpfr mpc isl

PACKAGE_NAME     = gcc

LICENSE          = GPL-3.0-only
HOMEPAGE         = https://gcc.gnu.org/
DESCRIPTION      = The GNU Compiler Collection includes front ends for C, C++, Objective-C, Fortran, Ada, Go, and D, \
                   as well as libraries for these languages (libstdc++,...).

include $(ENV_MAKE_DIR)/inc.env.mk

VERSION          = $(shell $(MACHINE_SCRIPT) gcc_version)
SRC_DIR          = $(PACKAGE_NAME)-$(VERSION)
SRC_NAME         = $(SRC_DIR).tar.xz
SRC_URL          = https://ftp.gnu.org/gnu/gcc/gcc-$(VERSION)/$(SRC_NAME)
SRC_MD5          = 2268420ba02dc01821960e274711bde0
INS_FULLER       = n

CACHE_BUILD      = y
CACHE_DEPENDS    =

COMPILE_TOOL     = autotools
AUTOTOOLS_FLAGS  = --with-gmp=$(DEP_PREFIX)/usr \
                   --with-mpfr=$(DEP_PREFIX)/usr \
                   --with-mpc=$(DEP_PREFIX)/usr \
                   --with-isl=$(DEP_PREFIX)/usr

ifneq ($(CROSS_COMPILE), )
GLIBC_SYSROOT    = $(shell $(ENV_BUILD_TOOL)gcc -print-sysroot)
AUTOTOOLS_FLAGS += --with-build-sysroot=$(GLIBC_SYSROOT) \
                   --with-toolexeclibdir=$(GLIBC_SYSROOT)/lib
endif

AUTOTOOLS_FLAGS += --enable-languages=c,c++ \
                   --enable-shared \
                   --enable-threads=posix \
                   --enable-checking=release

ifneq ($(CROSS_COMPILE), )
AUTOTOOLS_FLAGS += $(shell $(MACHINE_SCRIPT) gcc_arch_option)
endif

AUTOTOOLS_FLAGS += --disable-bootstrap \
                   --disable-multilib \
                   --enable-multiarch

AUTOTOOLS_FLAGS += --enable-nls \
                   --without-included-gettext \
                   --enable-clocale=gnu \
                   --enable-lto \
                   --enable-linker-build-id \
                   --enable-gnu-unique-object \
                   --enable-libstdcxx-debug \
                   --enable-libstdcxx-time=yes


ifeq ($(CROSS_COMPILE), )

CUSTOM_TARGETS   = build
include $(ENV_MAKE_DIR)/inc.rule.mk

build:
	@mkdir -p $(INS_TOPDIR)

else

CUSTOM_TARGETS   = prepend compile append
ifneq ($(INSTALL_OPTION), release)
CUSTOM_TARGETS  += install
endif
include $(ENV_MAKE_DIR)/inc.rule.mk

prepend:
	@sed -i 's@print-multi-os-directory@print-multi-directory@g' `find $(SRC_PATH) -name configure -o -name configure.ac -o -name Makefile.in | xargs`

compile:
	@cd $(OBJ_PREFIX) && $(MAKE) $(MAKE_FLAGS) all-host $(TOLOG) && $(MAKE) $(MAKE_FLAGS) install-host $(TOLOG)

append:
	@rm -f $(INS_TOPDIR)$(INS_SUBDIR)/bin/c++ $(INS_TOPDIR)$(INS_SUBDIR)/bin/cpp $(INS_TOPDIR)$(INS_SUBDIR)/bin/$(CROSS_COMPILE)*
	@ln -sf g++ $(INS_TOPDIR)$(INS_SUBDIR)/bin/c++
	@for bin in c++ g++ gcc gcc-ar gcc-nm gcc-ranlib; do \
		if [ -e $(INS_TOPDIR)$(INS_SUBDIR)/bin/$${bin} ]; then \
			ln -sf $${bin} $(INS_TOPDIR)$(INS_SUBDIR)/bin/$(CROSS_COMPILE)$${bin}; \
		fi; \
	done
	@ln -sf $(CROSS_COMPILE)gcc $(INS_TOPDIR)$(INS_SUBDIR)/bin/$(CROSS_COMPILE)gcc-$(VERSION)

ifneq ($(INSTALL_OPTION), release)
install:
	@
endif

endif
