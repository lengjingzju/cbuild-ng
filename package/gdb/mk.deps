############################################
# SPDX-License-Identifier: MIT             #
# Copyright (C) 2021-.... Jing Leng        #
# Contact: Jing Leng <lengjingzju@163.com> #
############################################

#DEPS(mk.deps) gdb(psysroot): unselect gmp mpfr mpc isl

PACKAGE_NAME     = gdb

LICENSE          = GPL-2.0-only & GPL-3.0-only & LGPL-2.0-only & LGPL-3.0-only
LICFILE          = file://COPYING*
HOMEPAGE         = https://www.gnu.org/software/gdb/
DESCRIPTION      = GDB, the GNU Project debugger, allows you to see what is going on 'inside' another program while it \
                   executes -- or what another program was doing at the moment it crashed. GDB can do four main kinds \
                   of things (plus other things in support of these) to help you catch bugs in the act: \
                   * Start your program, specifying anything that might affect its behavior. \
                   * Make your program stop on specified conditions. \
                   * Examine what has happened, when your program has stopped. \
                   * Change things in your program, so you can experiment with correcting the effects of one bug and \
                     go on to learn about another.

include $(ENV_MAKE_DIR)/inc.env.mk

VERSION          = 15.1
SRC_DIR          = $(PACKAGE_NAME)-$(VERSION)
SRC_NAME         = $(SRC_DIR).tar.xz
SRC_URL          = https://ftp.gnu.org/gnu/gdb/$(SRC_NAME)
SRC_MD5          = 494e3beaac44e66367c3e443a4414529
INS_FULLER       = n

CACHE_BUILD      = y
CACHE_DEPENDS    =

COMPILE_TOOL     = autotools
AUTOTOOLS_FLAGS  = --with-gmp=$(DEP_PREFIX)/usr \
                   --with-mpfr=$(DEP_PREFIX)/usr \
                   --with-mpc=$(DEP_PREFIX)/usr \
                   --with-isl=$(DEP_PREFIX)/usr \
                   --with-libgmp-prefix=$(DEP_PREFIX)/usr

AUTOTOOLS_FLAGS += --disable-bootstrap \
                   --disable-multilib \
                   gl_cv_c_multiarch=yes \
                   --enable-lto

ifeq ($(CROSS_COMPILE), )

CUSTOM_TARGETS   = build
include $(ENV_MAKE_DIR)/inc.rule.mk

build:
	@mkdir -p $(INS_TOPDIR)

else

ifneq ($(INSTALL_OPTION), release)
CUSTOM_TARGETS   = install
endif
include $(ENV_MAKE_DIR)/inc.rule.mk

ifneq ($(INSTALL_OPTION), release)
install:
	@
endif

endif
